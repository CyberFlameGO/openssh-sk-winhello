diff -u a/sk-api.h b/sk-api.h
--- a/sk-api.h	2020-02-14 04:10:54.000000000 +0330
+++ b/sk-api.h	2020-03-09 17:49:59.304083600 +0330
@@ -71,7 +71,7 @@
 	uint8_t required;
 };

-#define SSH_SK_VERSION_MAJOR		0x00040000 /* current API version */
+#define SSH_SK_VERSION_MAJOR		0x001c0000 /* current API version */
 #define SSH_SK_VERSION_MAJOR_MASK	0xffff0000

 /* Return the version of the middleware API */
diff -u a/ssh-sk.c b/ssh-sk.c
--- a/ssh-sk.c	2020-02-14 04:10:54.000000000 +0330
+++ b/ssh-sk.c	2020-03-09 19:04:58.682647100 +0330
@@ -611,7 +611,7 @@
 	int type, alg;
 	struct sk_sign_response *resp = NULL;
 	struct sshbuf *inner_sig = NULL, *sig = NULL;
-	uint8_t message[32];
+	//uint8_t message[32];
 	struct sk_option **opts = NULL;

 	debug("%s: provider \"%s\", key %s, flags 0x%02x%s", __func__,
@@ -647,13 +647,13 @@
 	}

 	/* hash data to be signed before it goes to the security key */
-	if ((r = ssh_digest_memory(SSH_DIGEST_SHA256, data, datalen,
+	/*if ((r = ssh_digest_memory(SSH_DIGEST_SHA256, data, datalen,
 	    message, sizeof(message))) != 0) {
 		error("%s: hash application failed: %s", __func__, ssh_err(r));
 		r = SSH_ERR_INTERNAL_ERROR;
 		goto out;
-	}
-	if ((r = skp->sk_sign(alg, message, sizeof(message),
+	}*/
+	if ((r = skp->sk_sign(alg, data, datalen,
 	    key->sk_application,
 	    sshbuf_ptr(key->sk_key_handle), sshbuf_len(key->sk_key_handle),
 	    key->sk_flags, pin, opts, &resp)) != 0) {
@@ -703,7 +703,7 @@
 	r = 0;
  out:
 	sshsk_free_options(opts);
-	explicit_bzero(message, sizeof(message));
+	//explicit_bzero(message, sizeof(message));
 	sshsk_free(skp);
 	sshsk_free_sign_response(resp);
 	sshbuf_free(sig);
diff -u a/sk-usbhid.c b/sk-usbhid.c
--- a/sk-usbhid.c	2020-02-14 04:10:54.000000000 +0330
+++ b/sk-usbhid.c	2020-03-09 19:13:00.851732000 +0330
@@ -25,6 +25,9 @@
 #include <stddef.h>
 #include <stdarg.h>

+#include "ssherr.h"
+#include "digest.h"
+
 #ifdef WITH_OPENSSL
 #include <openssl/opensslv.h>
 #include <openssl/crypto.h>
@@ -721,6 +724,7 @@
 	char *device = NULL;
 	fido_dev_t *dev = NULL;
 	struct sk_sign_response *response = NULL;
+	uint8_t messageHash[32];
 	int ret = SSH_SK_ERR_GENERAL;
 	int r;

@@ -733,9 +737,16 @@
 		goto out;
 	}
 	*sign_response = NULL;
+	if ((r = ssh_digest_memory(SSH_DIGEST_SHA256, message, message_len,
+	    messageHash, sizeof(messageHash))) != 0) {
+		skdebug(__func__,"hash application failed: %s", ssh_err(r));
+		goto out;
+	}
 	if (check_sign_load_resident_options(options, &device) != 0)
 		goto out; /* error already logged */
-	if ((dev = find_device(device, message, message_len,
+	if ((dev = find_device(device, messageHash, sizeof(messageHash),
 	    application, key_handle, key_handle_len)) == NULL) {
 		skdebug(__func__, "couldn't find device for key handle");
 		goto out;
@@ -744,8 +755,8 @@
 		skdebug(__func__, "fido_assert_new failed");
 		goto out;
 	}
-	if ((r = fido_assert_set_clientdata_hash(assert, message,
-	    message_len)) != FIDO_OK) {
+	if ((r = fido_assert_set_clientdata_hash(assert, messageHash,
+	    sizeof(messageHash))) != FIDO_OK) {
 		skdebug(__func__, "fido_assert_set_clientdata_hash: %s",
 		    fido_strerr(r));
 		goto out;
@@ -784,6 +795,7 @@
 	ret = 0;
  out:
 	free(device);
+	explicit_bzero(messageHash, sizeof(messageHash));
 	if (response != NULL) {
 		free(response->sig_r);
 		free(response->sig_s);
diff -u a/regress/misc/sk-dummy/sk-dummy.c b/regress/misc/sk-dummy/sk-dummy.c
--- a/regress/misc/sk-dummy/sk-dummy.c	2020-02-14 04:10:54.000000000 +0330
+++ b/regress/misc/sk-dummy/sk-dummy.c	2020-03-26 18:20:27.932297800 +0430
@@ -47,7 +47,7 @@
 	} while (0)
 #endif

-#if SSH_SK_VERSION_MAJOR != 0x00040000
+#if SSH_SK_VERSION_MAJOR != 0x001c0000
 # error SK API has changed, sk-dummy.c needs an update
 #endif

@@ -474,6 +474,8 @@
     struct sk_sign_response **sign_response)
 {
 	struct sk_sign_response *response = NULL;
+	uint8_t messageHash[32];
+	SHA256_CTX ctx;
 	int ret = SSH_SK_ERR_GENERAL;

 	if (sign_response == NULL) {
@@ -481,6 +483,9 @@
 		goto out;
 	}
 	*sign_response = NULL;
+	SHA256_Init(&ctx);
+	SHA256_Update(&ctx, message, message_len);
+	SHA256_Final(messageHash, &ctx);
 	if (check_options(options) != 0)
 		goto out; /* error already logged */
 	if ((response = calloc(1, sizeof(*response))) == NULL) {
@@ -491,13 +496,13 @@
 	response->counter = 0x12345678;
 	switch(alg) {
 	case SSH_SK_ECDSA:
-		if (sig_ecdsa(message, message_len, application,
+		if (sig_ecdsa(messageHash, sizeof(messageHash), application,
 		    response->counter, flags, key_handle, key_handle_len,
 		    response) != 0)
 			goto out;
 		break;
 	case SSH_SK_ED25519:
-		if (sig_ed25519(message, message_len, application,
+		if (sig_ed25519(messageHash, sizeof(messageHash), application,
 		    response->counter, flags, key_handle, key_handle_len,
 		    response) != 0)
 			goto out;
